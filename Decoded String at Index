"""

You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time, and the following steps are taken:
If the character reads a letter, that letter is written onto the tape.
If the character read is a digit d, the current tape is repeatedly written d - 1 more times.
Given an integer k, return the kth letter (1-indexed) in the decoded string.

Example 1:
Input: s = "leet2code3", k = 10
Output: "o"
Explanation: The decoded string is "leetleetcodeleetleetcodeleetleetcode".
The 10th letter in the string is "o".

Example 2:
Input: s = "ha22", k = 5
Output: "h"
Explanation: The decoded string is "hahahaha".
The 5th letter is "h".

Example 3:
Input: s = "a2345678999999999999999", k = 1
Output: "a"
Explanation: The decoded string is "a" repeated 8301530446056247680 times.
The 1st letter is "a".

Constraints:
- 2 <= s.length <= 100
- s consists of lowercase English letters and digits 2 through 9.
- s starts with a letter.
- 1 <= k <= 109
- It is guaranteed that k is less than or equal to the length of the decoded string.
- The decoded string is guaranteed to have less than 263 letters.

"""



class Solution:
    def decodeAtIndex(self, s: str, k: int) -> str:
        """

        Goal: Decode the string to a tape and return the kth letter in the decoded string.

        "leet2code3", k = 10
        tape += if the current index is not a digit
        If the current index is a digit
        tape = tape * int(digit)

        if k < current tape, return tape[k-1]

        Runtime: O(N)
        Spacetime: O(N)

        "leet2code3", k = 10
        leet = 4, 4*2 = 8
        leetleetc = 9, leetleetco = 10

        leet2 = 8, code = 12, leetleetcode
        code3 = 12*3 = 36
        36//3 = 12
        k: 10%12 = 10
        return o

        ha2 = 4, 2 = 2*4 = 8, k = 5
        8//2 = 4
        k: 5%4 = 1
        4//2 = 2, 2-1 = 1

        """
        
        length = 0
        # Get the total length of the decoded string
        for letter in s:
            if not letter.isdigit():
                length += 1
            else:
                length = length * int(letter)

        # Return at kth length
        for i in range(len(s)-1,-1,-1):
            if s[i].isdigit():
                length //= int(s[i])
                k %= length
            else:
                if k == length or k == 0:
                    return s[i]
                length -= 1
        
        return 0
        
        # tape = []
        # for letter in s:
        #     if not letter.isdigit():
        #         tape.append(letter)
        #     else:
        #         count = int(letter)
        #         if len(tape) * count >= k:
        #             count = -(-k // len(tape))
        #             tape = tape * count
        #             return tape[k-1]
        #         tape = tape * count
        # return -1
