"""

URL: https://leetcode.com/problems/binary-search/description/

Given an array of integer nums sorted in ascending order and an integer target, write a function to search the target in nums. If a target exists, then return its index. Otherwise, return -1.
You must write an algorithm with O(log n) runtime complexity

Example 1:
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4

Example 2:
Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1

Constraints:
- 1 <= nums.length <= 104
- -104 < nums[i], target < 104
- All the integers in nums are unique.
- nums are sorted in ascending order.

"""


class Solution:
    def search(self, nums: List[int], target: int) -> int:
        """

        Goal: return the index of the target in the nums list, return -1 if the 
        the target doesn't exist on the nums list.

        Must be in O(logN) runtime complexity
        - Divide and conquer (binary search)

        Easy case:
        if nums length is one, return nums[0] if it equals to the target, otherwise,
        return -1

        1. set a midpoint from the left and right boundary of the nums list.
        2. loop and compare the midpoint value with the target value, return the midpoint 
        if it is equal to the target value. Otherwise, update its boundary  
        to the left if the midpoint value exceeds the target, and to the right if it is 
        less than the target value.
        3. if the target is not found in the nums list after a binary search, return -1.

        Runtime: O(logN)
        Spacetime: O(1)

        """

        # Easy case
        # if len(nums) == 1: return -1 if nums[0] != target else 0

        # Divide and conquer

        # Left and right boundary
        left, right = 0, len(nums) - 1

        while left <= right:
            mid = (left + right) // 2

            if nums[mid] > target: right = mid - 1
            elif nums[mid] < target: left = mid + 1
            else: return mid
        
        return -1
