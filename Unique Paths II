"""

You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in the grid. A path that the robot takes cannot include any square that is an obstacle.
Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Example 2:
Input: obstacleGrid = [[0,1],[0,0]]
Output: 1

Constraints:
- m == obstacleGrid.length
- n == obstacleGrid[i].length
- 1 <= m, n <= 100
- obstacleGrid[i][j] is 0 or 1.

"""



class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        """

        Goal: return the possible unique paths to reach the bottom-right corner

        There will be obstacles on the grid shown as 1

        [1,0,0]
        [0,1,0]
        [0,0,0]
        ['1','1','1']
        ['1',1,'1']
        ['1','1','2']

        ['1',1]
        ['1',0]

        possible path = top if top == '1' + left if left == '1'  
        if m equal to 1, while n < col - 1, if there is a 1 obstacle, return 0, otherwise return 1
        [1,'1',0]

        if n is equal to 1 while m < row - 1, if there is a 1 obstacle, return 0, otherwise return 1
        [1]      
        ['1']
        [0]

        if m = n = 1, return 0 if grid[m-1][n-1] == 1, 1 otherwise

        if the bottom-right grid is an obstacle, return 0

        """

        m = len(obstacleGrid)
        n = len(obstacleGrid[0])

        # Easy case
        if m == n == 1:
            if obstacleGrid[m-1][n-1] == 1:
                return 0
            else:
                return 1
        if obstacleGrid[0][0] == 1:
            return 0

        obstacleGrid[0][0] = '1'

        # Edge case
        if obstacleGrid[m-1][n-1] == 1:
            return 0

        for i in range(1,m):
            if obstacleGrid[i][0] == 1:
                break
            obstacleGrid[i][0] = '1'

        for j in range(1,n):
            if obstacleGrid[0][j] == 1:
                break
            obstacleGrid[0][j] = '1'

        for row in range(1,m):
            for col in range(1,n):
                if obstacleGrid[row][col] == 1:
                    continue
                else:
                    # Check top
                    if type(obstacleGrid[row-1][col]) == str:
                        x = int(obstacleGrid[row][col]) + int(obstacleGrid[row-1][col])
                        obstacleGrid[row][col] = str(x)
                    # Check left
                    if type(obstacleGrid[row][col-1]) == str:
                        x = int(obstacleGrid[row][col]) + int(obstacleGrid[row][col-1])
                        obstacleGrid[row][col] = str(x)

        print(obstacleGrid)
        return int(obstacleGrid[m-1][n-1])

        """
        [0,0]
        [0,1]

        ['1', '1']
        ['1',1]
        """
