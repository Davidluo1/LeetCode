"""

Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.
Note that the same word in the dictionary may be reused multiple times in the segmentation.

Example 1:
Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:
Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.

Example 3:
Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
 
Constraints:
- 1 <= s.length <= 300
- 1 <= wordDict.length <= 1000
- 1 <= wordDict[i].length <= 20
- s and wordDict[i] consist of only lowercase English letters.
- All the strings of wordDict are unique.

"""



class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        """

        Goal: check if the string s have separate sequences in the dictionary words.

        leetcode, [leet,code]
        if leet in leetcode, s = s.split('leetcode')

        leetcode, [leet,code]
        leet:1 len(leet) * 1 = 4
        code:1 len(code) * 1 = 4
        4 + 4 = 8
        len(leetcode) = 8

        applepenapple, [apple,pen]
        apple:2 -> 5 * 2 = 10
        pen:1 -> 3 * 1 = 3
        10 + 3 = 13
        len(applepenapple) = 13

        dictionary
        catsandog, [cats,dog,sand,and,cat]
        cats:1
        dog:1
        sand:1
        and:1
        cat:1

        Step:
        1. Iterate through each word in the given dictionary
        2. Find the count of each word * the length of the word
        3. Add up the total length of the word 
        4. if total equals the length of the string s, return true, otherwise, return false

        Runtime: O(N*N) = O(N^2)
        Spacetime: O(1)

        leetcode, [leet,code] = leetcode
        penapplepenapple, [apple,pen] = applepen, [pen,'',apple]
        catsandog, [cat,dog,sand,and,cat]

        leetcode, [leet,code]
        for count in range(s.count(leet))
        s = s[start_index:start_index+len(word)]

        applepenapple, [apple,pen]
        s = s[0+5:] = penapple
        s = s[3+5] = pen

        abcd
        a [bcd] b [cd] cd []
        abc [d]
        b [cd] cd []
        cd []
        memo: [a,abc,b,cd]

        abcd
        [1,1,0,1]
        [1]
        [1,0,1,0,1,0,0,0,1]

        applepenapple
        [0,0,0,0,1,p,e,1,appl,1]

        catsandog
        [c,a,1,s,a,n,1,o,0]

        aaaaaaa
        [a,a,a,1,a,a,1]

        adbcd
        [1,0,0,0,0]

        leet
        [1,0,0,1]
        [1,0,0,1]

        cat
        [0,1,0,0,0,0,0,0,0,0]
        [1,1,0,0,0,0,0,0,0,0]
        [1,1,1,1,0,1,0,0,0,0]

        [1,1,0,0] 

        [T,0,0,0,T,0,0,0,T]
        [T,0,0,T,0,0,0,T]
        [T,0,0,T,T,0,0,T,0,0]

        Steps:
        1. Turn the last index of the valid word in s to true to indicate the availability of the next found word in the string s.
        2. If the previous last index is not true after testing all the words in the word dictionary, the last index won't turn to true.
        3. Return the last value of the dp.

        Runtime: O(N*M)
        Spacetime: O(N)
        """
        
        dp = [True] + [False]*len(s)
        
        for i in range(1,len(s)+1):
            for word in wordDict:
                if s[i-len(word):i] == word and dp[i-len(word)]:
                    dp[i] = True
                    break
        
        return dp[-1]

