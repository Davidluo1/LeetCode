"""

Given the root of a binary tree, imagine yourself standing on the right side of it, and return the values of the nodes you can see ordered from top to bottom.

Example 1:
Input: root = [1,2,3, null,5, null,4]
Output: [1,3,4]

Example 2:
Input: root = [1, null,3]
Output: [1,3]

Example 3:
Input: root = []
Output: []

Constraints:
- The number of nodes in the tree is in the range [0, 100].
- -100 <= Node.val <= 100

"""


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        """

        Pattern: return the right nodes/child
        Solution: tree search by level, store the rightmost child

        """

        output = []

        # Update and add the current level node to its leftmost node val
        def helper(n, h):
            if n is None:
                return
            if len(output) <= h:
                output.append(0)
            output[h] = n.val
            # Move to the next level if a right child is found, otherwise, a left child
            if n.left is not None:
                helper(n.left, h + 1)
            if n.right is not None:
                helper(n.right, h + 1)
        
        helper(root, 0)
        return output


        # Base case
        if not root:
            return []

        # output = []
        # cur = root

        # if cur.right is None:
        #     cur = cur.left
        #     if cur is not None:
        #         output.append(cur.val)

        # while cur.right is not None:
        #     cur = cur.right
        #     output.append(cur.val)
        #     if cur.right is None:
        #         if cur.left is not None:
        #             cur = cur.left
        #             output.append(cur.val)

        # while True:
        #     # check right child
        #     if cur.right:
        #         cur = cur.right
        #         output.append(cur.val)
        #     # check right child
        #     elif cur.left:
        #         cur = cur.left
        #         output.append(cur.val)
        #     # no child
        #     else:
        #         break
        
        # return output
