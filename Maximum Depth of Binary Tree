"""
Given the root of a binary tree, return its maximum depth.
A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 3

Example 2:
Input: root = [1,null,2]
Output: 2

Constraints:
- The number of nodes in the tree is in the range [0, 104].
- -100 <= Node.val <= 100

"""


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        """

        Goal: return the maximum depth of the binary tree

        Edge case:
        - The number of nodes in the tree could be 0
        - node's value could be negative

        Solution: Recursively call the maxDepth function to the current root's left and right child. Could you update its current maximum depth, return the subtree's final maximum, and add one to include the level of the beginning root?
        
        """

        # Base case
        if root is None:
            return 0

        # Search left and right subtrees
        l_depth = self.maxDepth(root.left)
        r_depth = self.maxDepth(root.right)

        # Update the current tree depth
        return max(l_depth, r_depth) + 1
