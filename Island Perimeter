"""

You are given a row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.
Grid cells are connected horizontally/vertically (not diagonally). The grid is surrounded by water, and there is exactly one island (i.e., one or more connected land cells).
The island doesn't have "lakes", meaning the water inside isn't connected to the water around the island. One cell is a square with a side length of 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.

Example 1:
Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0].[1,1,0,0]]
Output: 16

Example 2:
Input: grid = [[1]]
Output: 4

Example 3:
Input: grid = [[1,0]]
Output: 4

Constraints:
- row == grid.length
- col == grid[i].length
- 1 <= row, col <= 100
- grid[i][j] is 0 or 1.
- There is exactly one island in the grid.

"""


class Solution:
    def islandPerimeter(self, grid):
        row, col, perimeter = len(grid), len(grid[0]), 0

        for i in range(row):
            for j in range(col):
                # assume this cell is surrounded by an island from all sides
                if grid[i][j] == 1:
                    perimeter += 4

                    # subtract one for each intersection of each island
                    # check boundary
                    if i+1 < len(grid):
                        # bottom adjacent
                        if grid[i+1][j] == 1:
                            perimeter -= 1
                    if i-1 >= 0:
                        # top adjacent
                        if grid[i-1][j] == 1:
                            perimeter -= 1
                    if j+1 < len(grid[0]):
                        # right adjacent
                        if grid[i][j+1] == 1:
                            perimeter -= 1
                    if j-1 >= 0:
                        # left adjacent
                        if grid[i][j-1] == 1:
                            perimeter -= 1
        return perimeter
