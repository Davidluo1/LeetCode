"""

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104

"""



class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        """
        Goal: return the target position if it is in the nums list. Otherwise, 
        return the apporiate index.

        Easy case: (left and right boundary)
        if the length of the nums list is one, return 0 if nums[0] bigger or equals
        than the target value.
        if the last element of the nums list is smaller than the target, return the 
        length of the nums list.

        O(logN) = divide and conquer method
        Spacetime: O(1)

        1. set a mid point
        2. loop while the left index is less than the right index
        3. update the mid point accordingly
        4. return the index if the target is found or not found

        """

        # Easy case
        # if len(nums) == 1: return 0 if nums[0] >= target else 1
        # if target > nums[-1]: return len(nums)

        left, right = 0, len(nums) - 1 

        while left <= right:
            mid = (left + right) // 2

            # move to the left havles
            if nums[mid] > target:
                right = mid - 1
            # move to the right havles
            elif nums[mid] < target:
                left = mid + 1
            else:
                return mid

        return left
