"""

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false
 
Constraints:
-1 <= s.length <= 104
-s consists of parentheses only '()[]{}'.

"""


class Solution:
    def isValid(self, s: str) -> bool:
        # edge cases when the item length is odd  

        if len(s)%2 != 0:
            return False

        """
        Method:
        Use a parentheses dictionary to store an open bracket with its corresponding closing bracket. Append the open bracket to a stack, pop it off if its corresponding closing bracket is found on the next bracket. If all open brackets are matched, the size of the item should be empty.
        Since it only iterates the string once, the runtime should be O(N), with space time of O(N).
        """


        stack = []
        parentheses_dict = {
            '(': ')',
            '{': '}',
            '[': ']'
        }
        for bracket in s:
            if bracket in parentheses_dict:
                stack.append(bracket)
            elif len(stack) == 0 or bracket != parentheses_dict[stack.pop()]:
                return False

        return len(stack) == 0
