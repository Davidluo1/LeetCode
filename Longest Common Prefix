"""
Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters.

"""



class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        """
        Goal: Find the longest common prefix string in  an array of strings.

        Easy case:
        - if the length of the strs is 1, return strs
        - if there is a empty string inside the strs list, return ""

        Iterate from right to left, if the current substring is less or equal to the current max substring, continue

        tmp: wel
        res: fl

        Runtime: O(k^(N-1))
        """

        # Easy case
        if len(strs) == 1: return strs[0] if strs[0] != "" else ""
        
        # hint 1: has to be the same from start
        # hint 2: iterate from the smallest word length
        # hint 3: Match one should match the rest

        res = ""
        new_strs = sorted(strs)
        print(new_strs)
        for i in range(len(new_strs[0])):
            if new_strs[0][i] == new_strs[-1][i]:
                res += new_strs[0][i]
            else:
                return res
        return res


        if "" in strs: return ""
        res = ""
        common = True
        temp = ""
        for char in strs[0]:
            if common:
                temp += char
            else:
                temp = char
                common = True
            for word in strs[1:]:
                if temp not in word or strs[0].index(temp) != word.index(temp):
                    common = False
                    break
                # if strs.index(temp) != word.index(temp):
            if common:
                if len(temp) > len(res):
                    res = temp

        return res


        # temp: d
        # res: 
