"""

You are given an array of prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day to sell that stock in the future.
Return the maximum profit you can achieve from this transaction. If you cannot accomplish any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done, and the max profit = 0.
 
Constraints:
- 1 <= prices.length <= 105
- 0 <= prices[i] <= 104

"""


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        """

        No transactions are done on example 2, which means skipping the current price/day if the future price/day is equal to or bigger than the current price/day. 
        The question is asking for a maximum profit, similar question to a water container where need to choose two heights of the wall from a list that could contain the most water.

        Solution: use two pointers from the left and right to update the current max profit. Unlike the water container problem, this question is looking for a small cost and selling it at a high price. So instead of iterating through from the left and right border of the prices list, both pointer starts on the left side of the list where one pointer track the min stock price, and the other one track the max stock price. 

        """

        max_profit = 0
        min_price = float('inf')

        i = 0
        while i < len(prices):
            # update the current minimum price
            min_price = min(min_price, prices[i])

            if prices[i] > min_price:
                # calculate profit
                profit = prices[i] - min_price
                max_profit = max(max_profit, profit)
            i += 1
        return max_profit
