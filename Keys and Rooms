"""

There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.
When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.
Given an array of rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can see all the rooms, or false otherwise.

Example 1:
Input: rooms = [[1],[2],[3],[]]
Output: true
Explanation: 
We visit room 0 and pick up key 1.
We then visit room 1 and pick up key 2.
We then visit room 2 and pick up key 3.
We then visit room 3.
Since we were able to visit every room, we returned true.

Example 2:
Input: rooms = [[1,3],[3,0,1],[2],[0]]
Output: false
Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.

Constraints:
- n == rooms.length
- 2 <= n <= 1000
- 0 <= rooms[i].length <= 1000
- 1 <= sum(rooms[i].length) <= 3000
- 0 <= rooms[i][j] < n
- All the values of rooms[i] are unique.

"""



class Solution:
    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        """

        Goal: Check if it is possible to visit all rooms, and return True or False.

        Return false if missing a key to open a room

        Easy case:
        - where the length of the rooms list is two, if room 0 doesn't have the key 1, return False.

        The keys in a room could be 0 to 1000

        Store all visited keys in a visited list
        and use a set
        Iterate through all rooms from left to right
        if the next room number is in the visited list key, continue. Otherwise, return false

        Runtime: O(N*M)
        Spacetime: O(N-x)

        Improve runtime: store visited key in a dictionary, use the get function to check whether the key exists or not in O(1) Runtime
        d: 1:1, 3:1
        Ignore key already in the dictionary and key 0
        0, False

        Runtime: O(N)
        Spacetime: O(N)

        x = [False, True, False, True]
        if not x: return False
        else: return True

        Runtime: O(N*M)
        Spacetime: O(N)

        """
        

        # Easy case
        if len(rooms) == 2:
            if 1 not in rooms[0]: return False
        
        pending_rooms = rooms[0]
        visited = {0:1}
        count = 1

        while pending_rooms:
            key = pending_rooms.pop()
            if not visited.get(key):
                count += 1
                # key_map[key] = False
                visited[key] = 1
            else: continue

            # collect all keys in the current room
            for k in rooms[key]:
                if k != 0 and not visited.get(k):
                    pending_rooms.append(k)

        return count == len(rooms)

        # if True in key_map: return False
        # return True

        # key_map = {0:1}

        # for i in range (len(rooms)):
        #     if not key_map.get(i): return False
        #     for key in rooms[i]:
        #         if not key_map.get(key) and key != 0:
        #             key_map[key] = 1

        # return True
            
