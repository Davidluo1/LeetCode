"""

You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [2,3,0,1,4]
Output: 2
 
Constraints:
- 1 <= nums.length <= 104
- 0 <= nums[i] <= 1000
- It's guaranteed that you can reach nums[n - 1].

"""


class Solution:
    def jump(self, nums: List[int]) -> int:
        """

        Goal: Find the minimum number of jumps to reach the end of the number list

        Edge case:
        - when nums length is 1, return 0

        Visit nums[i], from i to i+j, if nums[i+j]
        [2,3,1,1,4]
        f:2, step:1, end:2
        f:4, step:1, end:2
        f:4, step:2, end:4

        """

        # Easy case
        if len(nums) == 1:
            return 0

        step = 0
        maxstep = 0
        end = 0

        # Iterate through the nums list 
        for i in range(len(nums)):
            # Update the max step it could take
            maxstep = max(maxstep, nums[i]+i)

            # Exit the loop when reaches the end of the nums list/nums[i-1]
            if maxstep >= len(nums) - 1:
                step += 1
                break
            
            # Keep track of the max step that could go at the current index and update the number of steps taken
            if i == end:
                step += 1
                end = maxstep
        
        return step
