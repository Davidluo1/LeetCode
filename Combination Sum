"""

Given an array of distinct integer candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to the target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the selected numbers differs.
The test cases are generated such that the number of unique combinations that sum up to the target is less than 150 combinations for the given input.

Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []

Constraints:
- 1 <= candidates.length <= 30
- 2 <= candidates[i] <= 40
- All elements of the candidates are distinct.
- 1 <= target <= 40

"""



class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        """

        Goal: return a list of all unique combinations of candidates that could sum up to the target.

        The same candidate could be reused
        Chosen numbers sum up the target

        Use a set variable to return unique combinations

        Easy case:
        - if only one candidate, if the target is bigger than the candidate, and the target mod the candidate equals 0
            return [candidate*(target // candidate)], otherwise, return 
        - if target equals 1, return

        7-2 = 5
        5-2 = 3
        [2,2,3]
        7-3 = 4
        4-3 = 1
        7-6 = 1
        7-7 = 0
        [7]

        Push all candidates in a dictionary
        Every time to find that prefix, use the get function
        8-2 = 6
        6-2 = 4
        4-2 = 2
        [2,2,2,2]
        while current prefix > current candidate
        8-3 = 5
        [3,5]
        5-3 = 2
        [3,3,2]
        8-5 = 3
        [5,3]

        Runtime: O(NK)
        Spacetime: O(N)

        """

        # Easy case
        if target == 1: return
        if len(candidates) == 1:
            c = candidates[0]
            if target < c or target % c != 0: return 
            else:
                return [[c]*(target//c)]
        
        def backtrack(start, target, path):
            if target == 0:
                result.append(path)
                return
            if target < 0:
                return
            for i in range(start, len(candidates)):
                backtrack(i, target - candidates[i], path + [candidates[i]])

        result = []

        # candidates.sort()
        backtrack(0, target, [])
        return result
        
        # c_map = {}
        # for c in candidates:
        #     c_map[c] = 1

        # res = []
        # visited = []
        # for c in candidates:
        #     temp = target
        #     temp_list = []
        #     if temp - c == 0:
        #         res.append([c])
        #         continue
        #     while temp - c > 0:
        #         print(temp)
        #         temp -= c
        #         if temp > 0:
        #             temp_list.append(c)
        #         print(temp_list)
        #         print(temp)
        #         if c_map.get(temp) and temp not in visited:
        #             x = temp_list.copy()
        #             x.append(temp)
        #             x = sorted(x)
        #             print("x:",x)
        #             if x not in visited:
        #                 print("Visited:",visited)
        #                 print("Append:",x)
        #                 res.append(x)
        #             visited.append(x)
        #         elif temp == 0:
        #             res.append(temp_list)
        
        #     print(res)
        # return res



