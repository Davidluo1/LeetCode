"""
Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]

Example 3:
Input: head = []
Output: []


Constraints:
The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000
"""


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        """
        Reverse the pointer of each node backward. 

        linked list could be empty
        node only have one attribute to other node

        solution: use three pointers, one track the previous node, one link the next node to the previous node, and one guide to the next node.
        """

        # base/edge case
        if not head:
            return None

        prev = None
        cur = head
        nex = cur.next

        while cur:
            cur.next = prev
            prev = cur
            cur = nex
            if nex:
                nex = nex.next

        return prev
