"""

Given an integer array nums sorted in non-decreasing order, remove the duplicates in place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:
Change the array nums such that the first k elements contain the unique elements in the order they were present in nums initially. The remaining elements of nums and the size of nums are not important.
Return k.

Custom Judge:
The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:
- 1 <= nums.length <= 3 * 104
- -100 <= nums[i] <= 100
- nums array is sorted in non-decreasing order.

"""


class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        """

        Goal: Remove the duplicate items in array nums in place while keeping their relative order.

        Approach (list):
        1. Create an empty list and an index pointer to the first item in array nums.
        2. Iterate through the nums array, if the current item in nums is not in the list, add the item
        to the list, and swap the item with the index pointer. Increment the index pointer by 1.
        3. return the length of the list.

        Runtime: O(NM)
        Spacetime: O(K)

        """

        k = 1
        index_ptr = 1
        prev = nums[0]
        i = 1

        # Iterate through the nums array and swap each next unique item in order from the first index of the nums array
        while i < len(nums):
            if nums[i] != prev:
                prev = nums[i]
                k += 1
                nums[index_ptr], nums[i] = nums[i], nums[index_ptr]
                index_ptr += 1
            i += 1
        
        return k

    
