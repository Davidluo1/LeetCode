"""

A linked list of length n is given, with each node containing an additional random pointer, which could point to any node in the list or null.
Could you construct a deep copy of the list? The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. The next and random pointers of the new nodes should point to new nodes in the copied list so that the original and copied list pointers represent the same list state. None of the pointers in the new list should point to nodes in the original list.
For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.
Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:
val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
Your code will only be given to the head of the original linked list.

Example 1:
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

Example 2:
Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]

Example 3:
Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]

Constraints:
- 0 <= n <= 1000
- -104 <= Node.val <= 104
- Node.random is null or points to some linked list node.

"""


"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        """

        Goal: Deep copy the input-linked list

        Easy case:
        - when there is no node in the linked list/head is null

        Steps:
        - Copy each node in the linked list to a hash table
        - Assign each node.next and node.random from the copy in the hash table
        
        {node(7):7, node(13):13, node(11):11, node(10):10, node(1):1}

        Runtime: O(n)
        Spacetime: O(1)

        """

        # Easy case
        if not head:
            return None

        hash_table = {}
        cur = head

        # Create a new node and copy the current node into a dictionary
        while cur:
            hash_table[cur] = Node(cur.val)
            cur = cur.next

        cur = head

        while cur:
            # new node.next = original node.next
            hash_table[cur].next = hash_table.get(cur.next)
            # new node.random = original node.random
            hash_table[cur].random = hash_table.get(cur.random)
            cur = cur.next

        return hash_table[head]
      
        
