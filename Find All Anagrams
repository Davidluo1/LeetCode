"""

Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:
Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", an anagram of "abc".
The substring with start index = 6 is "bac", an anagram of "abc".

Example 2:
Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", an anagram of "ab".
The substring with start index = 1 is "ba", an anagram of "ab".
The substring with start index = 2 is "ab", an anagram of "ab".
 
Constraints:
- 1 <= s.length, p.length <= 3 * 104
- s and p consist of lowercase English letters.

"""



class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        """

        Goal: return all start index of p's anagrams in s.

        Anagram: len(a) == len(b) and sorted(a) == sorted(b)
        cdbaebabacd, abc

        Easy case:
        - if len(s) == len(p), if sorted(s) == sorted(p), return 0, otherwise return []
        
        Steps:
        1. Iterate through the substring of length p from string s. 
        2. If sorted(substring) is equal to sorted(p), add the first index to the result list.
        3. return the result list

        Runtime: O((s-p-1)*2NlogN)
        Spacetime: O(N)

        """


        #Easy case
        if len(s) == len(p):
            if sorted(s) == sorted(p):
                return [0]
            else:
                return []
        
        res = []
        sorted_p = sorted(p)
        for i in range(len(s)-len(p)+1):
            # check anagram
            if sorted(s[i:i+len(p)]) == sorted_p:
                res.append(i)
        
        return res
