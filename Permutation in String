"""

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.

Example 1:
Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:
Input: s1 = "ab", s2 = "eidboaoo"
Output: false

Constraints:
- 1 <= s1.length, s2.length <= 104
- s1 and s2 consist of lowercase English letters.

"""



class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        """

        Goal: Check whether s1 is the permutation of s2.

        Approach:
        1. sort s1, iterate and compare size of s1 window in s2.
        2. Return True if one matches.

        Rutnime: O(2N or (LogN)N) O(N^2)
        Spacetime O(K)

        Dictionary
        [a:1, b:1]
        [e:1, i:1]

        [i:1, d:1]

        [e:1, i:1]
        [i:1, d:1]

        """

        # memo = {}
        # for i in range(len(s1)):
        #     if s1[i] not in memo:
        #         memo[s1[i]] = 1
        #     else:
        #         memo[s1[i]] += 1

        match = True

        for i in range(len(s2)-len(s1)+1):
            temp = s2[i:i+len(s1)]
            for ele in s1:
                if ele not in temp:
                    # match = False
                    break

            if sorted(s2[i:i+len(s1)]) == sorted(s1): return True
            # else: match = True

        return False
