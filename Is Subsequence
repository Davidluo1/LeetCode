"""

Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
A subsequence of a string is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:
Input: s = "abc", t = "ahbgdc"
Output: true

Example 2:
Input: s = "axc", t = "ahbgdc"
Output: false

Constraints:
- 0 <= s.length <= 100
- 0 <= t.length <= 104
- s and t consist only of lowercase English letters

"""



class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        """
        Goal: Check if the string s is a subsequence of string t.

        Approach:
        1. Iterate through string t with an index pointer at first index of string s.
        2. If the current element of the index point is found, increment index by 1 and continue searching 
        till the last element of string s.
        3. Return False if not all elements in string s is found.

        Runtime: O(T)
        Spacetime: O(1)

        Easy case:
        if s is equals to t or the length of s is 0, return true

        """

        # Easy case
        if s == t or len(s) == 0: return True

        i = 0
        for ele in t:
            if ele == s[i]:
                i += 1
            if i == len(s):
                return True

        return False



