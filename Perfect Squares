"""

Given an integer n, return the least number of perfect square numbers that sum to n.
A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. 
For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

Example 1:
Input: n = 12

Output: 3
Explanation: 12 = 4 + 4 + 4.

Example 2:
Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.

Constraints:
- 1 <= n <= 104

"""



class Solution:
    def numSquares(self, n: int) -> int:
        """
        Goal: return the least number of perfect square numbers that sum to n.

        4 = 2**2
        9 = 3**3

        n : least
        1 : 1
        2 : 2
        3 : 3
        4 : 1
        5 : 2
        6 : 3
        7 : 4
        8 : 2
        9 : 1
        10 : 2
        11: 3
        12: 3
        13: 2

        perfect squares = 1 to sqrt(n)
        1,2,3,1,2,3,4,2,1,2,3,3,2
        1     4         9           16
        x[4] = x[4-4] or x[i-current_perfect_square]
        if n == current_perfect_square, set it to 1 and break

        Easy case:
        if n is less than 4, return n

        Runtime: O(sqrt(k)+n*m)
        Spacetime: O(N)
        """

        # Easy case
        if n < 4: return n

        perfect_squares = []

        # Store all perfect squares up to sqrt of n
        for i in range (1,int(sqrt(n))+1):
            if i*i <= n:
                perfect_squares.append(i*i)

        dp = [10001] * (n+1)
        dp[1] = 1
        
        for i in range(4, n+1):
            for square in perfect_squares:
                if square == i:
                    dp[i] = 1
                    break
                elif square < i:
                    dp[i] = min(dp[i], dp[i-square]+dp[square])
                else: break

        return dp[-1]
