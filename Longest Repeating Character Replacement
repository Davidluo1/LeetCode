"""

You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.
Return the length of the longest substring containing the same letter you can get after performing the above operations.

Example 1:
Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.

Example 2:
Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
There may exists other ways to achieve this answer too.

Constraints:
1 <= s.length <= 105
s consists of only uppercase English letters.
0 <= k <= s.length

"""



class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        """
        
        Goal: find the longest substring containing the same letter you can get after performing k letter replacements.

        The longest substring length is at least k+1 size.

        Approach:
        Inorder to count the number of each element in the current window => dictionary

        """

        from collections import Counter

        my_dict = {}
        # Create a Counter object from the dictionary
        counter = Counter(my_dict)

        most_common, longest = 0, 0

        for i in range(len(s)):
            counter[s[i]] += 1

            most_common = max(most_common, counter[s[i]])
            if longest - most_common >= k:
                counter[s[i - longest]] -= 1
            else:
                longest += 1

        return longest
