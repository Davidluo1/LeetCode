"""

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

"""



class Solution:
    def trap(self, height: List[int]) -> int:
        """

        Goal: Compute the maximum water the elevation map could trap.

        Easy case:
        if the length of the height array is less than 3, it cannot trap any water.

        Approach:
        Keep iterating through the array if the right wall is smaller than the left wall.
        Keep track of the walls in between.
        Each iteration can contain up to left wall height of water.
        Ignore walls that is 0.
        Stop when the left wall index reaches to the length of the array minus 2.

        Runtime: O(N)
        Spacetime: O(1)

        """
        

        max_volume, left, right = 0, 0, len(height)-1
        l_wall, r_wall = height[left], height[right]


        while left < right:
            if height[left] < height[right]:
                left += 1
                l_wall = max(l_wall, height[left])
                max_volume += (l_wall - height[left])               
            else:
                right -= 1
                r_wall = max(r_wall, height[right])
                max_volume += (r_wall - height[right])
        
        return max_volume

