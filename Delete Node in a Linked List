"""

There is a singly-linked list head and we want to delete a node node in it.
You are given the node to be deleted node. You will not be given access to the first node of the head.
All the values of the linked list are unique, and it is guaranteed that the given node is not the last in the linked list.

Delete the given node. Note that deleting the node does not mean removing it from memory. We mean:
- The value of the given node should not exist in the linked list.
- The number of nodes in the linked list should decrease by one.
- All the values before the node should be in the same order.
- All the values after the node should be in the same order.

Custom testing:
For the input, you should provide the entire linked list head and the node to be given node. The node should not be the last node on the list; it should be an actual node on the list.
We will build the linked list and pass the node to your function.
The output will be the entire list after calling your function.

Example 1:
Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: You are given the second node with value 5. After calling your function, the linked list should become 4 -> 1 -> 9.

Example 2:
Input: head = [4,5,1,9], node = 1
Output: [4,5,9]
Explanation: You are given the third node with value 1. After calling your function, the linked list should become 4 -> 5 -> 9.
 

Constraints:
- The number of the nodes in the given list is in the range [2, 1000].
- -1000 <= Node.val <= 1000
- The value of each node in the list is unique.
- The node to be deleted is in the list and is not a tail node.

"""


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def deleteNode(self, node):
        """

        :type node: ListNode
        :rtype: void Do not return anything, modify node in-place instead.

        Not be given access to the first node of the head
        Given node is not the last node in the linked list

        Given a node before the last, it has .next link to the next node but 
        does not have any access to the previous node. Thus, the next node will 
        be the node to delete/skip. Copy the value of the next node to the given 
        node and skip the next node by reconnecting the given node to the next.next 
        node. 

        Runtime: O(1)
        Spcetime: O(1)

        """
        
        # swap the current node's value with the next node's value
        node.val, node.next.val = node.next.val, node.val

        # skip the next node
        node.next = node.next.next
