"""
You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.
Return the minimum number of steps to make t an anagram of s.
An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.

Example 1:
Input: s = "bab", t = "aba"
Output: 1
Explanation: Replace the first 'a' in t with b, t = "bba" which is anagram of s.

Example 2:
Input: s = "leetcode", t = "practice"
Output: 5
Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.

Example 3:
Input: s = "anagram", t = "mangaar"
Output: 0
Explanation: "anagram" and "mangaar" are anagrams. 

Constraints:
- 1 <= s.length <= 5 * 104
- s.length == t.length
- s and t consist of lowercase English letters only.

"""



class Solution:
    def minSteps(self, s: str, t: str) -> int:
        """
        Goal: Find the minimum steps to make two two-string anagrams.

        Easy case:
        - string s and t == 1, if s != t, return 1, otherwise return 0
        
        abb, aab

        Runtime: O(2NlogN+N)
        Spacetime: O(1)

        b:2, a:1 | a:2, b:1

        Runtime: O(2N)
        Spacetime: O(2N)

        b, t.index(b), memo =[b:1]
        a, t.index(a), add to memo
        find all indexes of b, each time you find a b in the string, subtract 1 from the length of memo
        
        Runtime: O(2N)
        Spacetime: O(N)
        """

        # Easy case
        if len(s) == 1:
            if s == t: return 0
            return 1

        s_map,t_map = {},{}
        
        count = 0
        for i in range(len(s)):
            # if not s_map.get(s[i]):
            #     s_map[s[i]] = 1
            # else:
            #     s_map[s[i]] += 1
            if not t_map.get(t[i]):
                t_map[t[i]] = 1
            else:
                t_map[t[i]] += 1
            
        for letter in s:
            if not t_map.get(letter):
                count += 1
            else:
                if t_map[letter] <= 0:
                    count += 1
                else:
                    t_map[letter] -= 1

        # for key, value in s_map.items():
        #     if not t_map.get(key):
        #         count += value
        #     elif value > t_map[key]:
        #         count += value - t_map[key]
            
        return count
