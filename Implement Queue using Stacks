"""

Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

Implement the MyQueue class:
void push(int x) Pushes element x to the back of the queue.
int pop() Removes the element from the front of the queue and returns it.
int peek() Returns the element at the front of the queue.
boolean empty() Returns true if the queue is empty; otherwise, it is false.

Notes:
You must use only standard stack operations, which means only push to top, peek/pop from top, size, and empty operations are valid.
Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.

Example 1:
Input
["MyQueue", "push", "push", "peek", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 1, 1, false]

Explanation
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, the queue is [2]
myQueue.empty(); // return false

Constraints:
- 1 <= x <= 9
- At most 100 calls will be made to push, pop, peek, and empty.
- All the calls to pop and peek are valid.

"""


class MyQueue:
    """
    May stimulate a stack using a list or deque
    [1]
    [1,2]
    [2]

    Push value x is between 1 and 9
    """

    # initilize queue
    def __init__(self):
        self.queue = []

    def push(self, x: int) -> None:
        """ Add element to the back of the queue """
        # list append puts the new item to the back
        self.queue.append(x)

    def pop(self) -> int:
        """ Remove the element from the front of the queue, return the element """
        # list pop(0) removes the front element
        return self.queue.pop(0)

    def peek(self) -> int:
        """Return the element at the front of the queue"""
        # list index 0 is the front element of the queue
        return self.queue[0]

    def empty(self) -> bool:
        """Check if the queue is empty, return true, false otherwise"""
        # list length of 0 represents an empty
        if len(self.queue) == 0:
            return True
        return False


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
