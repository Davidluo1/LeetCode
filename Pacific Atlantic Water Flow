"""

There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.
The island is partitioned into a grid of square cells. You are given an m x n integer matrix height where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).
The island receives a lot of rain, and the rainwater can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.
Return a 2D list of grid coordinates where result[i] = [ri, ci] denotes that rainwater can flow from the cell (ri, ci) to both the Pacific and Atlantic oceans.

Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:
[0,4]: [0,4] -> Pacific Ocean 
       [0,4] -> Atlantic Ocean
[1,3]: [1,3] -> [0,3] -> Pacific Ocean 
       [1,3] -> [1,4] -> Atlantic Ocean
[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean 
       [1,4] -> Atlantic Ocean
[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean 
       [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean
[3,0]: [3,0] -> Pacific Ocean 
       [3,0] -> [4,0] -> Atlantic Ocean
[3,1]: [3,1] -> [3,0] -> Pacific Ocean 
       [3,1] -> [4,1] -> Atlantic Ocean
[4,0]: [4,0] -> Pacific Ocean 
       [4,0] -> Atlantic Ocean

Constraints:
- m == heights.length
- n == heights[r].length
- 1 <= m, n <= 200
- 0 <= heights[r][c] <= 105

"""


class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        # Base case
        if len(heights) == 1:
            if len(heights[0]) == 1:
                return [[0,0]]
        valid_cell = []
       
        n = len(heights)
        match = []
        temp_dict = {}

        for i in range(n):
            left_to_right_biggest = 0
            left_to_right_match = []
            top_to_bottom_biggest = 0
            top_to_bottom_match = []

            # Find the biggest cell from left to right and top to bottom
            for j in range(n):
                if heights[i][j] >= left_to_right_biggest:
                    if heights[i][j] == left_to_right_biggest:
                        left_to_right_match.append([i,j])
                    else:
                        left_to_right_match = [[i,j]]
                        left_to_right_biggest = heights[i][j]

                if heights[j][i] >= top_to_bottom_biggest:
                    if heights[j][i] == top_to_bottom_biggest:
                        top_to_bottom_match.append([j,i])
                    else:
                        top_to_bottom_match = [[j,i]]
                        top_to_bottom_biggest = heights[j][i]

            # Append valid cell matrix
            for cell in left_to_right_match:
                if cell not in valid_cell:
                    valid_cell.append(cell)
            for cell in top_to_bottom_match:
                if cell not in valid_cell:
                    valid_cell.append(cell)

        return sorted(valid_cell)
