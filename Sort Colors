"""

Given an array nums with n objects colored red, white, or blue, sort them in place so that objects of the same color are adjacent, with the colors in red, white, and blue.
We will use the integers 0, 1, and 2 to represent the colors red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

Constraints:
- n == nums.length
- 1 <= n <= 300
- nums[i] is either 0, 1, or 2.

"""



class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify numbers in place instead.

        return the sorted array

        Easy case:
        when n equals one return

        Any kind sorting algorithm

        Iterate through the nums list, and count the numbers using a dictionary.
        Iterate through the dictionary, return the key times its count

        0:2, 1:2, 2:2
        i = 0
        [0,0,1,1,2,2]

        Runtime: O(N+NK)
        Spacetime: O(N)

        0,2,2,1,1,0
        0,1,2,2,1,0
        0,1,1,2,2,0
        0,0,1,1,2,2
        """

        for i in range(1,len(nums)):
            x = i
            # swap with left adjcent num
            while nums[x-1] > nums[x] and x > 0:
                nums[x], nums[x-1] = nums[x-1], nums[x]
                x = x-1
            

        


        
