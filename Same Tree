"""

Given the roots of two binary trees p and q, write a function to check whether they are the same.
Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

Example 1:
Input: p = [1,2,3], q = [1,2,3]
Output: true

Example 2:
Input: p = [1,2], q = [1,null,2]
Output: false

Example 3:
Input: p = [1,2,1], q = [1,1,2]
Output: false

Constraints:
- The number of nodes in both trees is in the range [0, 100].
- -104 <= Node.val <= 104

"""



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        """
        Goal: Check if trees p and q are structurally identical.

        Easy case:
        if one of the tree from p and q is empty, return false

        Solution:
        1. Use tree traversal on both tree p and tree q and check all node's values 
        at the same position. From root to leaf. 
        Runtime: O(N)
        Spacetime: O(1)

        2. Store the node's value using tree traversal in a list, and compare both 
        lists generated from tree p and tree q, if both lists are equal to each 
        other, return true.
        Runtime: O(N)
        Spacetime: O(2N)


        Can't just do it if p == q because they are binary tree
        Identical:
        The same node at the same location in the binary tree

        """

        if not p and not q: return True
        if not p or not q or p.val != q.val: return False

        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)

