"""

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109

"""



class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        """
        Goal: return the element that appears more than n/2 times.

        Approach:
        Dictionary - extra memory
        1. Iterate through the nums array, store the count of each numbers.
        2. return the key if its value is more than n/2.

        """

        for num in set(nums):
            if nums.count(num) > len(nums)/2: return num

        # memo = {}
        # for num in nums:
        #     if num in memo.keys():
        #         memo[num] += 1
        #     else:
        #         memo[num] = 1
        
        # for i, value in memo.items():
        #     if value > len(nums)/2: return i


        # # Easy case
        # if len(nums) == 1: return nums[0]

        # i = 1
        # count = 1
        # nums = sorted(nums)
        # prev = nums[0]
        # while i < len(nums):
        #     while i < len(nums) and nums[i] == prev:
        #         count += 1
        #         i += 1
        #     if count > len(nums)/2: return prev
        #     prev = nums[i]
        #     count = 1
        #     i += 1
