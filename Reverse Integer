"""
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 
Example 1:
Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1

"""



class Solution:
    def reverse(self, x: int) -> int:
        """
        Goal: Reverse the input integer.

        Restrictions:
        - has to be inside the range [-2^31,2^31 - 1], return 0 otherwise (10 digit startint 2)
        - save negative sign

        Easy case:
        - if x is between -9 to 9, return x

        -123, operator:-, 123 -> 321 -> -321
        120, operator:+, 120 -> 021 -> 21

        while right integer is 0, jump to the next integer until a integer of not 0 is found,
        then include all the rest integers.

        str(x)
        len(x)-1,-1,-1
        zero = true
        if cur = 0
        zero = false
        add the rest integers to an empty string
        int(output string)
        
        Runtime: O(N+2NlogN)
        Spacetime: O(N)
        """

        # Easy case
        if -9 <= x <= 9:
            return x
        
        operator = '+'
        x = str(x)
        if x[0] == '-':
            operator = '-'
            x = x[1:]

        zero = True
        if operator == '-':
            res = "-"
        else:
            res = ""
        for i in range(len(x)-1,-1,-1):
            if x[i] == '0' and zero:
                continue
            zero = False
            res += x[i]

        res = int(res)
        if -2**31 <= res <= (2**31)-1:
            return res
        return 0
