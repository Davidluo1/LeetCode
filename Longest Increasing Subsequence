"""

Given an integer array nums, return the longest-long, strictly increasing subsequence.
A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1

Follow up: Can you develop an algorithm that runs in O(n log(n)) time complexity?

Constraints:
- 1 <= nums.length <= 2500
- -104 <= nums[i] <= 104

"""


class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        """

        Goal: find the longest length of increasing subsequence

        The nums list length has to be at least one
        Elements in the nums list could be negative

        Easy case:
        - when the nums list length is 1, return 1

        Iterate through the list from left to right, and use a max function to keep 
        track of the current longest subsequence. It will require two lists to 
        store and compare the subsequence length while traversing through the 
        nums list.

        Runtime: O(N)
        Spacetime: O(2N)

        [10] []
        [10]
        [10] [10]
        [9] 
        [9] [10]    same length, compared to the rightmost number
        [9] [9]
        [2]
        [2] [9]
        [2]
        [5] [2]     add the number to the list if the current number is bigger than the previous right number
        [5] [2,5]   Replace the right-most number if it is smaller than the current number
        [3]
        [3] [2,3]
        [2,3]
        [2,3,7] [2,3]
        [2,3,7,101] [2,3,7]
        [2,3,7,18] [2,3,7,101]
        [2,3,7,18]

        [0] []
        [0,1] []
        [0,1] [0,1]
        [0,1,3] [0,1]
        [0,1,2] [0,1,3]        Replace the right-most number if the current number is smaller than the right-most but bigger than the second right-most
        [0,1,2,3] [0,1,2]
        [0,1,2,3]

        [10]
        [9]
        [2]
        [2,5]
        [2,3]
        [2,3,7]
        [2,3,7,101]
        [2,3,7,18]
        Steps:
        
        [3,5,6,19]
        [2,5,19]
        [4,19]
        [5,6,7,12]
        """

        if len(nums) == 1:
            return 1

        cur = [nums[0]]

        """
        [2,4,5,6,7,12]
        [2,4,5,6,7,12]
        [3,5,6] 2
        [2,5,6] 5

        [2,4,5,6,7,12]
        """

        for i in range(1,len(nums)):
            if nums[i] > cur[-1]:
                cur.append(nums[i])
            else:
                left, right = 0, len(cur)-1
                while left < right:
                    mid = (left+right) // 2
                    if cur[mid] < nums[i]:
                        left = mid + 1
                    else:
                        right = mid
                cur[left] = nums[i]

        return len(cur)

        cur = [nums[0]]

        for i in range(1,len(nums)):
            if nums[i] > cur[-1]:
                cur.append(nums[i])
            else:
                for j in range(len(cur)):
                    if nums[i] <= cur[j]:
                        cur[j] = nums[i]
                        break

        return len(cur)
