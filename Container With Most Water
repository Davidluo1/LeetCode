"""

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.

Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Example 2:
Input: height = [1,1]
Output: 1

Constraints:
-n == height.length
-2 <= n <= 105
-0 <= height[i] <= 104

"""

class Solution:
    def maxArea(self, height: List[int]) -> int:
        # easy case
        if len(height) == 2:
            return min(height)

        # left and right starting pointer
        left = 0      
        right = len(height) - 1
        maxWater = 0

        # continue until left and right pointers meet
        while left < right:
            # Get the width of the current container
            width = right - left    
            # Get the min height of the container
            h = min(height[left], height[right])
            # Calculate the current max water capacity
            water = width * h
            # Update the current maximum water capacity
            maxWater = max(maxWater, water)

            # Move the left and right pointers towards each other
            if height[left] < height[right]:
                left += 1
            else:
                right -= 1
       
        return maxWater
