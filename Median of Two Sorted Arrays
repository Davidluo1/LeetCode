"""
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Constraints:
-nums1.length == m
-nums2.length == n
-0 <= m <= 1000
-0 <= n <= 1000
-1 <= m + n <= 2000
--106 <= nums1[i], nums2[i] <= 106

"""



class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        """
        Goal: find the median of two arrays merged.

        Two sorted arrays merge into a sorted array
        
        Easy case:
        - If one array is empty, return the median of the other array

        For negative number: if x//y < 0, then -(-x//y)

        Binary search:
        use the samller array, iterate through each integer, binary search and place in the other array.
        Runtime: O(Mlog(N))

        array1.append(array2)
        if odd, median = len(merged_array) // 2
        if even, median = len(merged_array) // 2, take -1 and current integer // 2
        sorted = log(N)
        take smaller array

        [1,3,2]
        [1,2,3]
        """

        def median(arr):
            if len(arr) % 2 != 0:
                return arr[len(arr)//2]
            mid1 = len(arr) // 2
            mid2 = mid1-1
            x = (arr[mid1]+arr[mid2]) // 2
            if x < 0:
                return -(-(arr[mid1]+arr[mid2]) / 2)
            return (arr[mid1]+arr[mid2]) / 2

        # Easy case
        if len(nums1) == 0:
            return median(nums2)
        elif len(nums2) == 0:
            return median(nums1)

        if len(nums1) >= len(nums2):
            nums1.extend(nums2)
            return median(sorted(nums1))
        else:
            nums2.extend(nums1)
            return median(sorted(nums2))

