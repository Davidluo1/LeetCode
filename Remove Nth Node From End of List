"""

Given the head of a linked list, remove the nth node from the end of the list and return its head.
Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]
 
Constraints:
- The number of nodes in the list is sz.
- 1 <= sz <= 30
- 0 <= Node.val <= 100
- 1 <= n <= sz

"""

Solution 1:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:     
        # Create a dummy head
        dummy_head = ListNode(0, head)

        p1 = dummy_head
        p2 = head

        # Move pointer one to n position
        while n > 0:
            p2 = p2.next
            n -= 1

        # Both pointers move together till p1 reaches the last node
        while p2:
            p1 = p1.next
            p2 = p2.next
       
        # Remove the nth node
        p1.next = p1.next.next

        return dummy_head.next


Solution 2:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        # move pointer one to n position
        while n > 0:
            p2 = p2.next
            n -= 1

        # both pointers move together till p1 reaches the last node
        while p2:
            p1 = p1.next
            p2 = p2.next
        
        # remove the n th node
        p1.next = p1.next.next

        return dummy_head.next



