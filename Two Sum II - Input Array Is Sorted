"""
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.
Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.

"""



class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        """
        Goal: Find two numbers that add up to a specific target where the index1 is less than index2.

        Requirement:
        Must use only constant extra space

        Approach:
        1. Iterate each element in the numbers array, calculate the sum with the current next element 
        while the current sum is less than the target.
        2. Once a solution is found, return that solution.

        Runtime: O(N(N-K))
        Spacetime: O(1)

        """

        i = 0


        while i < len(numbers)-1:
            j = i+1
            while j < len(numbers):
                if numbers[i]+numbers[j] == target:
                    return [i+1,j+1]
                elif numbers[i]+numbers[j] > target:
                    break
                j+=1
                while j < len(numbers) and numbers[j] == numbers[j-1]:
                    j+=1
            i+=1
            while i < len(numbers)-1 and numbers[i] == numbers[i-1]:
                i+=1
                    
        return



        # i = 1

        # while i < len(numbers):
        #     for j in range(i, len(numbers)):
        #         if numbers[i-1]+numbers[j] == target:
        #             return [i,j+1]
        #         elif numbers[i-1]+numbers[j] > target:
        #             break
            
        #         # skip duplicates
        #         if j < len(numbers):
        #             while j < len(numbers)-1 and numbers[j] == numbers[j-1]:
        #                 j+=1
        #                 continue
        #     while i < len(numbers)-2 and numbers[i] == numbers[i-1]:
        #         i+=1
        #         continue
        #     # i+=1
