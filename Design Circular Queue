"""

Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on the FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called a "Ring Buffer".

One of the benefits of the circular queue is that we can use the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.

Implement the MyCircularQueue class:
- MyCircularQueue(k) Initializes the object with the queue size to be k.
- int Front() Gets the front item from the queue. If the queue is empty, return -1.
- int Rear() Gets the last item from the queue. If the queue is empty, return -1.
- boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
- boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
- boolean isEmpty() Checks whether the circular queue is empty or not.
- boolean isFull() Checks whether the circular queue is full or not.
- You must solve the problem without using your programming language's built-in queue data structure. 

Example 1:
Input
["MyCircularQueue", "enQueue", "enQueue", "enQueue", "enQueue", "Rear", "isFull", "deQueue", "enQueue", "Rear"]
[[3], [1], [2], [3], [4], [], [], [], [4], []]
Output
[null, true, true, true, false, 3, true, true, true, 4]
Explanation
MyCircularQueue myCircularQueue = new MyCircularQueue(3);
myCircularQueue.enQueue(1); // return True
myCircularQueue.enQueue(2); // return True
myCircularQueue.enQueue(3); // return True
myCircularQueue.enQueue(4); // return False
myCircularQueue.Rear();     // return 3
myCircularQueue.isFull();   // return True
myCircularQueue.deQueue();  // return True
myCircularQueue.enQueue(4); // return True
myCircularQueue.Rear();     // return 4

Constraints:
- 1 <= k <= 1000
- 0 <= value <= 1000
- At most 3000 calls will be made to enQueue, deQueue, Front, Rear, isEmpty, and isFull.

"""


class MyCircularQueue:
    """
    [] [] []
    [1] [] []
    [1] [2] []
    [1] [2] [3]
    [] [2] [3]
    [4] [2] [3]
    """

    def __init__(self, k: int):
        # self.circular_q = [None] * k
        self.circular_q = []
        self.k = k

    def enQueue(self, value: int) -> bool:
        """ insert an element into the queue, return false if the queue is full """
        if self.isFull():
            return False
        self.circular_q.append(value)
        return True

    def deQueue(self) -> bool:
        """ delete element from the queue, return false if the queue is empty.
        - FIFO first in first out """
        if self.isEmpty():
            return False
        self.circular_q.pop(0)
        return True

    def Front(self) -> int:
        """ return the front item from the queue, return -1 if the queue is empty """
        if self.isEmpty():
            return -1
        return self.circular_q[0]

    def Rear(self) -> int:
        """" return the last item from the queue, return -1 if the queue is empty """
        if self.isEmpty():
            return -1
        return self.circular_q[-1]

    def isEmpty(self) -> bool:
        """ return true if the queue is empty, false otherwise """
        return len(self.circular_q) == 0

    def isFull(self) -> bool:
        """ return true if the queue is full, false otherwise """
        return len(self.circular_q) == self.k

# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
