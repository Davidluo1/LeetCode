"""
You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if the target is in the matrix or false otherwise.

Write a solution in O(log(m * n)) time complexity.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

Constraints:
- m == matrix.length
- n == matrix[i].length
- 1 <= m, n <= 100
- -104 <= matrix[i][j], target <= 104

"""



class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        """
        Goal: Check if the target value is found in the given matrix.

        It must be O(logMN) runtime.
        binary search
        - divide and conquer
        Spacetime: O(1)

        1. divide and conquer the rows of the matrix
        2. divide and conquer the target row of the Martix
        3. return true if the target exist in the target row

        Create a binary search function

        check the left and right boundary elements
        - early exist: if match the target or outside the left or right boundary

        """

        left, right = 0, len(matrix) - 1

        while left < right:
            mid = (left+right) // 2

            if matrix[mid][0] <= target <= matrix[mid][-1]:
                left = mid
                break
            elif target < matrix[mid][0]:
                right = mid - 1
            elif target > matrix[mid][0]:
                left = mid + 1   
            else: 
                return True
        
        row = left
        # left and right boundary of the target row
        # if target < matrix[row][0] or target > matrix[row][-1]: return False
        # if target == matrix[row][-1] or target == matrix[row][0]: return True

        left, right = 0, len(matrix[row]) - 1

        while left <= right:
            mid = (left+right) // 2

            if target < matrix[row][mid]:
                right = mid - 1
            elif target > matrix[row][mid]:
                left = mid + 1
            else: 
                return True

        # not found in the target row
        return False
