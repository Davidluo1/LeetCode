"""

Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Constraints:
-1 <= nums.length <= 10
--10 <= nums[i] <= 10
-All the numbers of nums are unique.

"""


class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        """

        nums = [1,2]
        output = [[],[1],[2],[1,2]]

        nums = [1,2,3]
        output = [[],[1],[2],[1,2],[1,3],[2,3],[1,2,3]]

        From this I can see there is a partern where an addtional input will double the amount of output, and half of the new output is equal to the previous output. For the new subsets generated in the output are the combination of old output with the new input. Therefore, the next added input will generate the subsets of old output and add all the old subset with the new input.
        The runtime will be O(2N) by adding the old subsets to the new generated subsets. The space time wil be O(2^N) by generating 2 to the n number of subset base on the input.
        
        """

        res = [[]]

        for i in nums:
            subset = []
            # new input
            subset = [item + [i] for item in res]

            # add to the output
            res += subset
        
        return res
