
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        """

        Goal: Find all triplets where they are not the same combination and sum up to 0.

        Approach 1:
        Find all combinations of triplets and store the ones with sum of 0.
        i, j, k

        Runtime: O(N^3)
        Spacetime: O(K)

        Approach 2:
        x + y + - 1 = 0
        x + y = 1

        [2，1，0，-1，-1，-4]
        [-4, -1, -1, 0, 1, 2]

        """

        result = []
        nums.sort()
        for i in range(len(nums)-2):
            if i>0 and nums[i] == nums[i-1]:
                continue

            j = i+1
            k = len(nums)-1

            while j < k:
                temp = nums[i] + nums[j] + nums[k]
                if temp > 0:
                    k -= 1
                elif temp < 0:
                    j += 1
                else:
                    result.append([nums[i],nums[j],nums[k]])
                    while j < k and nums[j] == nums[j+1]: j+=1
                    while j < k and nums[k] == nums[k-1]: k-=1
                    j += 1
                    k -= 1

                    
                    

        return result


        result = []


        nums.sort()
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                for k in range(j+1,len(nums)):
                    temp = [nums[i], nums[j], nums[k]]
                    if sum(temp) == 0 and temp not in result:
                        result.append(temp)
        

        return result
