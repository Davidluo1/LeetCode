"""

Given a string s of '(', ')' and lowercase English characters.
Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and returns any valid string.

Formally, a parentheses string is valid if and only if:
It is the empty string, that contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.

Example 1:
Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

Example 2:
Input: s = "a)b(c)d"
Output: "ab(c)d"

Example 3:
Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.

Constraints:
- 1 <= s.length <= 105
- s[i] is either'(', ')', or a lowercase English letter.

"""



class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        """
        Goal: remove the minimum number of parentheses.

        Easy case:
        - if the length of the string s is 1, if s[0] is ( or ), return empty string, otherwise, return s

        dictionary
        open: 
        close: ):12
        if close barcket but no open brakcet, remove the close brakcet using replace to ''
        remove(index)
        append open bracket, remove open brakcet when a close braket is found
        Runtime: O(3N)
        Spacetime: O(2N)

        
        """

        # Easy case
        if len(s) == 1:
            if s[0] in ('(',')'):
                return ""
            return s

        open_b = []
        s = list(s)
        
        for i in range(len(s)):
            if s[i] == ')':
                # check open bracket
                if len(open_b) > 0:
                    open_b.pop()
                    continue
                s[i] = "0"
            elif s[i] == '(':
                open_b.append(i)

        if open_b:
            for index in open_b:
                s[index] = "0"

        return "".join([c for c in s if c != "0"])
            
