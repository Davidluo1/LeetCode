"""

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Constraints:
- The number of nodes in the tree is in the range [1, 104].
- -231 <= Node.val <= 231 - 1

"""


# Binary tree node.
class TreeNode:
   def __init__(self, val=0, left=None, right=None):
       self.val = val
       self.left = left
       self.right = right

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        arr = [float('-inf')]

        def inorder(root):
            if the root is None: return None
            # Check the left subtree
            if inorder(root.left) == False:
                return False

            # Check if the next item is bigger or equal to the previous item
            if arr[-1] >= root.val:
                return False
            else:
                arr.append(root.val)

            # check the right subtree
            if inorder(root.right) == False:
                return False

        # return false if in order traversal outputs an incorrect list
        if inorder(root) == False:
            return False

        return True
