"""
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
According to the definition of LCA on Wikipedia: â€œThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).

Example 1:
Input: root = [1,2], p = 1, q = 2
Output: 1

Constraints:
-The number of nodes in the tree is in the range [2, 105].
--109 <= Node.val <= 109
-All Node.val are unique.
-p != q
-p and q will exist in the tree.
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
  def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
    # base case if p or q is found
    if not root or root == p or root == q:
      return root

    # recursively check right and left subtree
    l_tree = self.lowestCommonAncestor(root.left, p, q)
    r_tree = self.lowestCommonAncestor(root.right, p, q)

    # return the root if both p and q are found
    if l_tree and r_tree:
      return root

    return l_tree or r_tree
