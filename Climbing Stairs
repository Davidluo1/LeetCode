"""

You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Constraints:
- 1 <= n <= 45

"""



class Solution:
    def climbStairs(self, n: int) -> int:
        """
        Goal: return the possible distinct ways to climb to the top
        
        n=1
        1
        ways:1

        n=2
        1+1

        2
        ways:2

        n=3
        1+1+1
        1+2
        2+1
        ways:3

        n=4
        1+1+1+1
        2+1+1
        1+2+1
        1+1+2
        2+2
        ways:5

        n=5
        1+1+1+1+1
        1+1+1+2
        1+1+2+1
        1+2+1+1
        2+1+1+1
        2+2+1
        2+1+2
        1+2+2
        ways:8

        2+2+1+1
        2+1+2+1
        2+1+1+2

        0 -> 1 -> 2 -> 3 -> 5 -> 8 -> 13 -> 21 -> 34
            1 -> 1 -> 1 -> 2 -> 3 -> 5 -> 8 -> 13
        res = 1
        prev = 0
        for i in range(n-1), prev = res, res += prev
        p:0 r:1 = r:1 p:1
        p:1 r:1 = r:2 p:1
        p:1 r:2 = r:3 p:2
        p:2 r:3 = r:5 p:3
        p:3 r:5 = r:8 p:5

        Runtime: O(N-1)
        Spacetime: O(1)
        """

        res = 1
        prev = 0
        for i in range(n):
            temp = res
            res += prev
            prev = temp

        return res
