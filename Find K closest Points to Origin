"""

Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

 

Example 1:


Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]
Explanation: The answer [[-2,4],[3,3]] would also be accepted.
"""



class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        """
        Goal: find the k closest points to the origin.

        Formula: (x1-x2)^2 + (y1-y2)^2

        [1,3] : 10
        [-2,2] : 8
        
        [-2,2]
        Initilize res list with the k points from the points list
        Replacing the first item if the current point is closer to the origin

        [3,3],[5,-1]
        res = points[0:k]
        for i in range(k,len(points))

        find the largest point in the res list and replace it with the current point 
        only if the point is further than the current point.
        Use element index to replace i furthest point from the res list

        Runtime: ((N-K)*K)
        Spacetime: O(K)

        Iterate through the points list once, updated the closest point in sliding windows
        
        Easy:
        - when k equals to the length of the points list

        Find the closest points
        - acsending order points of distance from the origin
            - √(x1 - x2)2 + (y1 - y2)2)
        return the k points from the sorted ew points list

        Runtime: O(N)
        Spacetime: O(1)
        """

        # Easy case
        if k == len(points): return points

        # points = sorted(points, key = lambda point: sqrt((point[0]-0)**2 + (point[1]-0)**2))

        return sorted(points, key = lambda point: sqrt((point[0]-0)**2 + (point[1]-0)**2))[:k]

        # res = points[:k]

        # for i in range(k,len(points)):
        #     change = False
        #     a = sqrt((points[i][0]-0)**2 + (points[i][1]-0)**2)
        #     c = a
        #     for j in range(len(res)):
        #         b = sqrt((res[j][0]-0)**2 + (res[j][1]-0)**2)
        #         if c < b:
        #             change = True
        #             c = b
        #             index = j
        #     if change:
        #         res[index] = points[i]

        # return res
