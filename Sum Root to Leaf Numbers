"""
You are given the root of a binary tree containing digits from 0 to 9 only.
Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.
A leaf node is a node with no children.

Example 1:
Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.

Example 2:
Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.

Constraints:
- The number of nodes in the tree is in the range [1, 1000].
- 0 <= Node.val <= 9
- The depth of the tree will not exceed 10.

"""



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        """
        Goal: Return the sum of all roots to leaf numbers.

        Easy case:
        if the root does not have a left and right child, return the root value

        DFS to get each root-to-leaf path
        - return nodes from the root to the leafs
        if the node is null, return
        search left first, and then search right child

        number = 0 * 10 + 1
        number = 1 * 10 + 2 = 12
        total * 10 + node.val

        total: 4
        total = total * 10 + 9
        total = total * 10 + 5 = 495

        search left + search right

        Runtime: O(N^2)
        Spacetime: O(1)
        """

        # Easy case
        if not root.left and not root.right: return root.val

        # Depth first search
        def dfs(node, total):
            # base case
            if not node: return 0

            total = total * 10 + node.val

            if not node.left and not node.right:
                return total

            return dfs(node.left, total) + dfs(node.right, total)
        return dfs(root, 0)
